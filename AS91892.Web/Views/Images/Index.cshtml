@model PaginatedList<Image>;
@{
    ViewData["Title"] = "Images";
}

<h1>@ViewData["Title"]</h1>


<form asp-action="Index" method="get">
    <div class="form-actions no-color">
        <p>
            Find by name: <input type="text" name="SearchString" value="@ViewData["CurrentFilter"]" />
            <input type="submit" value="Search" class="btn btn-default" /> |
            <a asp-action="Index">Back to Full List</a>
        </p>
    </div>
</form>


<table class="table">
    <thead>
        <tr>
            <th>
                Id
            </th>
            <th>
                Image Title
            </th>
        </tr>
    </thead>


    @if (Model is not null) {
        @if (Model.Any())
        {
            <tbody>
            @foreach (var item in Model)
            {
              <tr>
                <td>
                    <a asp-action="Details" asp-route-id="@item.Id">@Html.Encode(item.Id.ToString().ToUpper())</a>
                </td>
                <td>
                    @Html.DisplayFor(model => item.ImageTitle)
                </td>
            </tr>
          }
          </tbody>
        }
    }
</table>
@{
    if (Model is null)
    {
        <h1>No models available</h1>
    }
    else if (!Model.Any())
    {
        <h1>No models available</h1>
    }
}

@{
    var previousIsDisabled = !Model!.HasPreviousPage ? "disabled" : string.Empty;
    var nextIsDisabled = !Model!.HasNextPage ? "disabled" : string.Empty;
}

<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex - 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @previousIsDisabled">
    Previous
</a>
<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex + 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @nextIsDisabled">
    Next
</a>